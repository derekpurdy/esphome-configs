substitutions:
  devicename: sensor-sumppump
  friendly_devicename: Sump Pump Sensor

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: yes

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ".lan"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_devicename}"
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API & OTA Updates
api:
  password: !secret api_password
ota:
  password: !secret ota_password

# Enable Web Server.
web_server:
  port: 80

# Enable MQTT
mqtt:
  broker: mqtt.lan
  username: !secret mqtt_user
  password: !secret mqtt_password
  birth_message:
    topic: $devicename/status
    payload: online
  will_message:
    topic: $devicename/status
    payload: offline

# Ensure Time Sync with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Toronto

sensor:
  - platform: ultrasonic
    id: sumppump_level
    trigger_pin: D1
    echo_pin: D2
    name: "${friendly_devicename}: Level"
    update_interval: 5s
    filters:
      - filter_out: nan
      - exponential_moving_average:
          alpha: 0.3
          send_every: 1
      # Replace the 0.42 by the height of your container. From the sensor to the bottom.
      # I multiplied by 100 in order to get CM since the sensor works in meters
      - lambda: return (0.61-x)*100;
    unit_of_measurement: "cm"
    device_class: distance
    state_class: "measurement"
    on_value:
      then:
        - component.update: sumppump_percent
  - platform: wifi_signal
    name: "${friendly_devicename}: WiFi Signal"
    update_interval: 60s

  - platform: template
    name: "${friendly_devicename}: Capacity"
    unit_of_measurement: "%"
    id: sumppump_percent
    lambda: |-
      if (id(sumppump_level).state) {
        float capacity_percent = (id(sumppump_level).state / 61) * 100;
        return capacity_percent;
      } else {
        return {};
      }
    update_interval: never

button:
  - platform: restart
    name: "${friendly_devicename}: Restart"
    icon: "mdi:restart"
    device_class: "restart"
