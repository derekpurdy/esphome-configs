substitutions:
  devicename: sensor-watersoftener
  friendly_devicename: Water Softener Sensor

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  esp8266_restore_from_flash: yes

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ".lan"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_devicename}"
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API & OTA Updates
api:
  password: !secret api_password
ota:
  password: !secret ota_password

# Enable Web Server.
web_server:
  port: 80

# Enable MQTT
mqtt:
  broker: mqtt.lan
  username: !secret mqtt_user
  password: !secret mqtt_password
  birth_message:
    topic: $devicename/status
    payload: online
  will_message:
    topic: $devicename/status
    payload: offline

# Ensure Time Sync with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: America/Toronto

sensor:
  - platform: ultrasonic
    id: ultrasonic1
    trigger_pin: D6
    echo_pin: D5
    name: "${friendly_devicename}: Depth"
    device_class: "distance"
    state_class: "measurement"
    filters:
      # Sensor offset to match TOP of bin
      - offset: -0.01
      - median:
          window_size: 5
          send_every: 5
          send_first_at: 1
      - exponential_moving_average:
          alpha: 0.1
          send_every: 1
    on_value:
      then:
        - component.update: capacity
    update_interval: 1h
  - platform: template
    name: "${friendly_devicename}: Capacity"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    id: capacity
    lambda: |-
      // Distance from top of bin to max full
      static float threshold_full = .16;
      // Distance from top of bin to empty - just above water line
      static float threshold_empty = .57;

      static float capacity = threshold_empty - threshold_full;

      if (id(ultrasonic1).state) {
        float current_level_adjusted = id(ultrasonic1).state - threshold_full;
        float capacity_percent = (capacity - current_level_adjusted) / capacity * 100;
        if (capacity_percent > 100) {
          capacity_percent = 100;
        } else if (capacity_percent < 0) {
          capacity_percent = 0;
        }
        return capacity_percent;
      } else {
        return {};
      }
    update_interval: never
  - platform: wifi_signal
    name: "${friendly_devicename}: WiFi Signal"
    update_interval: 60s

font:
  - file: "fonts/arial.ttf"
    id: my_font
    size: 28

i2c:
  sda: D1
  scl: D2

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      it.printf(11, 20, id(my_font), "%.0f%%", id(capacity).state);
      if (id(capacity).state >= 0 || id(capacity).state <= 120) {
        int bottom_graph = id(capacity).state * 0.01 * 50;
        //int bottom_graph = 50 * 0.01 * 50;
        int top_graph = 50 - bottom_graph;
        it.rectangle(84, 6, 30, top_graph); //top graph
        it.filled_rectangle(84, 6 + top_graph, 30, bottom_graph); //bottom graph
      }

button:
  - platform: restart
    name: "${friendly_devicename}: Restart"
    icon: "mdi:restart"
    device_class: "restart"
